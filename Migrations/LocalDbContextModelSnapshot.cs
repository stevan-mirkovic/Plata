// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plata.Data;

#nullable disable

namespace Plata.Migrations
{
    [DbContext(typeof(LocalDbContext))]
    partial class LocalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Plata.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Addresses", t =>
                        {
                            t.HasCheckConstraint("CK_Address_Company_Or_Employee", "([CompanyId] IS NOT NULL AND [EmployeeId] IS NULL) OR ([CompanyId] IS NULL AND [EmployeeId] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Plata.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("FoundationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("UserAccountId")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Plata.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Plata.Models.EmploymentContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalaryCoefficient")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("PositionId");

                    b.ToTable("EmploymentContracts");
                });

            modelBuilder.Entity("Plata.Models.PayPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("TaxFreeSalaryPortion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("PayPolicies");
                });

            modelBuilder.Entity("Plata.Models.Payslip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CompanyCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PayPolicyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TaxFreeBonuses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxableBonuses")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("PayPolicyId");

                    b.ToTable("Payslips");
                });

            modelBuilder.Entity("Plata.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseGrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Plata.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Plata.Models.Address", b =>
                {
                    b.HasOne("Plata.Models.Company", "Company")
                        .WithOne("Address")
                        .HasForeignKey("Plata.Models.Address", "CompanyId");

                    b.HasOne("Plata.Models.Employee", "Employee")
                        .WithOne("Address")
                        .HasForeignKey("Plata.Models.Address", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Plata.Models.Company", b =>
                {
                    b.HasOne("Plata.Models.UserAccount", "UserAccount")
                        .WithOne("Company")
                        .HasForeignKey("Plata.Models.Company", "UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Plata.Models.Employee", b =>
                {
                    b.HasOne("Plata.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Plata.Models.EmploymentContract", b =>
                {
                    b.HasOne("Plata.Models.Employee", "Employee")
                        .WithMany("EmploymentContracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plata.Models.Position", "Position")
                        .WithMany("EmploymentContracts")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Plata.Models.PayPolicy", b =>
                {
                    b.HasOne("Plata.Models.Company", "Company")
                        .WithMany("PayPolicies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Plata.Models.Components.ContributionsPolicy", "CompanyContributions", b1 =>
                        {
                            b1.Property<int>("PayPolicyId")
                                .HasColumnType("int");

                            b1.Property<decimal>("HealthInsuranceRate")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("PensionContributionRate")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("UnemploymentInsuranceRate")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PayPolicyId");

                            b1.ToTable("PayPolicies");

                            b1.WithOwner()
                                .HasForeignKey("PayPolicyId");
                        });

                    b.OwnsOne("Plata.Models.Components.ContributionsPolicy", "EmployeeContributions", b1 =>
                        {
                            b1.Property<int>("PayPolicyId")
                                .HasColumnType("int");

                            b1.Property<decimal>("HealthInsuranceRate")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("PensionContributionRate")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("UnemploymentInsuranceRate")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PayPolicyId");

                            b1.ToTable("PayPolicies");

                            b1.WithOwner()
                                .HasForeignKey("PayPolicyId");
                        });

                    b.Navigation("Company");

                    b.Navigation("CompanyContributions")
                        .IsRequired();

                    b.Navigation("EmployeeContributions")
                        .IsRequired();
                });

            modelBuilder.Entity("Plata.Models.Payslip", b =>
                {
                    b.HasOne("Plata.Models.EmploymentContract", "EmploymentContract")
                        .WithMany("Payslips")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Plata.Models.PayPolicy", "PayPolicy")
                        .WithMany("Payslips")
                        .HasForeignKey("PayPolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmploymentContract");

                    b.Navigation("PayPolicy");
                });

            modelBuilder.Entity("Plata.Models.Position", b =>
                {
                    b.HasOne("Plata.Models.Company", "Company")
                        .WithMany("Positions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Plata.Models.Company", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Employees");

                    b.Navigation("PayPolicies");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Plata.Models.Employee", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("EmploymentContracts");
                });

            modelBuilder.Entity("Plata.Models.EmploymentContract", b =>
                {
                    b.Navigation("Payslips");
                });

            modelBuilder.Entity("Plata.Models.PayPolicy", b =>
                {
                    b.Navigation("Payslips");
                });

            modelBuilder.Entity("Plata.Models.Position", b =>
                {
                    b.Navigation("EmploymentContracts");
                });

            modelBuilder.Entity("Plata.Models.UserAccount", b =>
                {
                    b.Navigation("Company")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
